[project]
name = "eos"
version = "0.10.0"
description = "EOS is a comprehensive software framework and runtime for laboratory automation."
keywords = ["automation", "science", "lab", "experiment", "orchestration", "distributed", "infrastructure"]
authors = [
    { name = "Angelos Angelopoulos", email = "aangelos@cs.unc.edu" }
]
license = { text = "BSD 3-Clause" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Typing :: Typed",
    "Intended Audience :: Science/Research",
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "ray[default]==2.50.1",
    "typer==0.20.0",
    "rich==14.2.0",
    "PyYAML==6.0.3",
    "jinja2==3.1.6",
    "pydantic==2.12.3",
    "pydantic-settings==2.11.0",
    "networkx==3.5.0",
    "sqlalchemy==2.0.44",
    "alembic==1.17.0",
    "psycopg[binary]==3.2.9",
    "asyncpg==0.30.0",
    "minio==7.2.18",
    "bofire[optimization]==0.2.1",
    "pandas==2.3.3",
    "ortools<=9.12",
    "litestar[standard]==2.18.0",
]

[dependency-groups]
worker = [
    "ray[default]==2.50.1",
    "typer==0.20.0",
    "rich==14.2.0",
    "pydantic==2.12.3",
    "pydantic-settings==2.11.0",
    "sqlalchemy==2.0.44",
    "alembic==1.17.0",
]
optimizer_worker = [
    { include-group = "worker" },
    "bofire[optimization]==0.2.1",
    "pandas==2.3.3",
]

sila2 = [
    "sila2>=0.7",
    "protobuf>=6.32",
    "grpcio-tools>=1.75",
    "black",
    "isort",
]

dev = [
    "aiosqlite",
    "ruff",
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
]
docs = [
    "sphinx",
    "sphinx-autobuild",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-click",
    "pydata-sphinx-theme",
]

[tool.uv]
default-groups = ["dev", "docs"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["eos"]

[project.scripts]
eos = "eos.eos:eos_app"

eos_test = "scripts.dev.test:main"
eos_lint = "scripts.dev.lint:main"
eos_format = "scripts.dev.format:main"
eos_docs_build = "scripts.dev.docs_build:main"
eos_docs_build_gh = "scripts.dev.docs_build_gh:main"
eos_docs_serve = "scripts.dev.docs_serve:main"
eos_generate_llms_txt = "scripts.dev.generate_llms_txt:main"

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
asyncio_default_fixture_loop_scope = "function"
markers = [
    "slow: mark tests as slow (deselect with '-m \"not slow\"')",
]
asyncio_mode = "auto"

[tool.ruff]
include = [
    "{eos,tests}/**/*.py",
    "pyproject.toml"
]
exclude = [
    "eos/database/_migrations/versions/"
]
target-version = "py310"
line-length = 120

lint.mccabe.max-complexity = 14
lint.isort.known-first-party = ["eos", "tests"]

lint.select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "ERA", # eradicate
    "EXE", # flake8-executable
    "F", # pyflakes
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PIE", # flake8-pie
    "PLC", # pylint - convention
    "PT", # flake8-pytest
    "PLE", # pylint - error
    "PLR", # pylint - refactor
    "PLW", # pylint - warning
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - warning
    "YTT", # flake8-2020
]
lint.ignore = ["I001", "ANN001", "ANN002", "ANN003", "ANN204", "ANN401", "PLR0913", "PLR0915", "N805", "A005", "S603"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
    "S",
    "S101",
    "I001",
    "F405",
    "F403",
    "T201",
    "D",
    "ANN",
    "PT001",
    "PT004",
    "PT023",
    "PLR0913",
    "PLR2004",
    "F401",
    "F811",
]
"eos/database/_migrations/versions/**/*.*" = ["ALL"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "typer.Argument"
]

[tool.coverage.run]
data_file = ".coverage/.coverage"
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
