Tasks
=====
A task in EOS encapsulates an operation and can be thought of as a function.
Tasks are the elementary building block in EOS.
A task is ephemeral, meaning it is created, executed, and terminated.
A task takes some inputs and returns some outputs, and may use one or more devices.

There are two kinds of inputs: **parameters** and **resources**.

#. **Parameters**: Data such as integers, decimals, strings, booleans, etc that are passed to the task.
#. **Resources**: Laboratory resources such as containers (vessels that may contain samples), reagents, or other consumables.

There are three kinds of outputs: **parameters**, **resources**, and **files**.

#. **Parameters**: Data such as integers, decimals, strings, booleans, etc that are returned by the task.
#. **Resources**: Laboratory resources such as containers, reagents, or consumables.
#. **Files**: Raw data or reports generated by the task, such as output files from analysis.

.. figure:: ../_static/img/task-inputs-outputs.png
   :alt: EOS Task Inputs and Outputs
   :align: center

Parameters
----------
Parameters are values that are input to a task or output from a task.
Every parameter has a specific data type.
EOS supports the following parameter types:

* **int**: An int number.
  Equivalent to Python's ``int``
* **float**: A float number.
  Equivalent to Python's ``float``
* **str**: A str (series of text characters).
  Equivalent to Python's ``str``
* **bool**: A true/false value.
  Equivalent to Python's ``bool``
* **choice**: A value that must be one of a set of predefined choices.
  The choices can be any type.
* **list**: A list of values of a specific type.
  Equivalent to Python's ``list``.
* **dict**: A dict of key-value pairs.
  Equivalent to Python's ``dict``.

Tasks can have multiple parameters of different types.
EOS will ensure that the parameters passed to a task are of the correct type and have values that meet their constraints.

Resources
---------
Resources in EOS represent anything that tasks should exclusively allocate (other than devices).
This can include sample containers (like beakers or vials), locations in the lab that can only be occupied by one container,
reagents, or any other laboratory asset that requires exclusive access.

Resources are referenced by a unique **resource name**.
Every resource in EOS must have a name, and these are specified in the laboratory definition under the ``resources`` section.
Resources are treated as *global* objects and can move across labs.
However, every resource must have a "home" lab from which it originates.

To pass a resource to a task or return a resource from a task, its name is used (or a reference to another task's resource).
Every task may accept specific types of resources, such as ``beaker``, ``vial``, or custom types.
Multiple different resources can be passed to a task.
Users define resource types in the laboratory definition using ``resource_types``, which act as templates.
Individual resource instances are then created under ``resources`` with a specified type.
EOS will ensure that only resource types that are compatible with the task are passed to it.

Files
-----
Files may be generated by a task and EOS will store them in an object storage (MinIO).
Output files can be used to record raw data for future reference, and can be downloaded by the user.

.. note::
    Files cannot currently be passed as inputs to tasks via the EOS runtime and its object storage.
    This is planned to be supported in the future.
    It is still possible to pass them using an external object storage (e.g., MinIO), but this has to be implemented and
    managed manually.

Task Implementation
-------------------
* Tasks are implemented in the `tasks` subdirectory inside an EOS package
* Each task has its own subfolder (e.g., tasks/magnetic_mixing)
* There are two key files per task: ``task.yml`` and ``task.py``

YAML File (task.yml)
~~~~~~~~~~~~~~~~~~~~
* Specifies the task type, description, devices, and input/output parameters and resources
* Acts as the interface contract (spec) for the task
* This contract is used to validate tasks, and EOS enforces the contract statically and dynamically during execution
* Useful as documentation for the task

Below is an example task YAML file for a GC analysis task for GCs made by SRI Instruments:

:bdg-primary:`task.yml`

.. code-block:: yaml

    type: SRI GC Analysis
    desc: Perform gas chromatography (GC) analysis on a sample.

    devices:
      gc:
        type: sri_gas_chromatograph

    input_parameters:
      analysis_time:
        type: int
        unit: seconds
        value: 480
        desc: How long to run the GC analysis

    output_parameters:
      known_substances:
        type: dict
        desc: Peaks and peak areas of identified substances
      unknown_substances:
        type: dict
        desc: Peaks and peak areas of substances that could not be identified

The task specification makes clear that:

* The task is of type "SRI GC Analysis"
* The task requires a device named ``gc`` of type ``sri_gas_chromatograph``.
  EOS will enforce this requirement and the device will be accessible in the task implementation via ``devices["gc"]``.
* The task takes an input int parameter ``analysis_time`` in seconds.
  It has a default value of 480, making this an optional parameter.
* The task outputs two dictionaries: ``known_substances`` and ``unknown_substances``.

Parameter Specification
"""""""""""""""""""""""
Parameters are defined in the ``input_parameters`` and ``output_parameters`` sections of the task YAML file.

Below are examples and descriptions for each parameter type:

Integer
"""""""
.. code-block:: yaml

    sample_rate:
      type: int
      desc: The number of samples per second
      value: 44100
      unit: Hz
      min: 8000
      max: 192000

Integers must have a unit (can be n/a) and can also have a minimum and maximum value.

Float
"""""
.. code-block:: yaml

    threshold_voltage:
      type: float
      desc: The voltage threshold for signal detection
      value: 2.5
      unit: volts
      min: 0.0
      max: 5.0

Decimals must have a unit (can be n/a) and can also have a minimum and maximum value.

String
""""""
.. code-block:: yaml

    file_prefix:
      type: str
      desc: Prefix for output file names
      value: "experiment_"

Boolean
"""""""
.. code-block:: yaml

    auto_calibrate:
      type: bool
      desc: Whether to perform auto-calibration before analysis
      value: true

Booleans are true/false values.

Choice
""""""
.. code-block:: yaml

    column_type:
      type: choice
      desc: HPLC column type
      value: "C18"
      choices:
        - "C18"
        - "C8"
        - "HILIC"
        - "Phenyl-Hexyl"
        - "Amino"

Choice parameters take one of the specified choices.

List
""""
.. code-block:: yaml

    channel_gains:
      type: list
      desc: Gain values for each input channel
      value: [1.0, 1.2, 0.8, 1.1]
      element_type: float
      length: 4
      min: [0.5, 0.5, 0.5, 0.5]
      max: [2.0, 2.0, 2.0, 2.0]

List parameters are a sequence of values of a specific type.
They can have a specific length and minimum and maximum per-element values.

Dictionary
""""""""""
.. code-block:: yaml

    buffer_composition:
      type: dict
      desc: Composition of a buffer solution
      value:
        pH: 7.4
        base: "Tris"
        concentration: 50
        unit: "mM"
        additives:
          NaCl: 150
          KCl: 2.7
          CaCl2: 1.0
        temperature: 25

Dictionaries are key-value pairs. The values can be any type.

Python File (task.py)
~~~~~~~~~~~~~~~~~~~~~~
* Implements the task
* All task implementations must inherit from ``BaseTask``

:bdg-primary:`task.py`

.. code-block:: python

    from eos.tasks.base_task import BaseTask


    class MagneticMixing(BaseTask):
        async def _execute(
            self,
            devices: BaseTask.DevicesType,
            parameters: BaseTask.ParametersType,
            resources: BaseTask.ResourcesType,
        ) -> BaseTask.OutputType:
            magnetic_mixer = devices["mixer"]
            mixing_time = parameters["mixing_time"]
            mixing_speed = parameters["mixing_speed"]

            resources["beaker"] = magnetic_mixer.mix(resources["beaker"], mixing_time, mixing_speed)

            return None, resources, None

Let's walk through this example code:

``_execute`` is the only required function in a task implementation.
It is called by EOS to execute a task.
The function takes three arguments:

#. ``devices``: A dictionary of devices assigned to the task.
   Devices are accessed by name (e.g., ``devices["mixer"]``).
   The devices are represented as wrappers to Ray actor references, and the task implementation can call functions from
   the device implementation.
#. ``parameters``: A dictionary of the input parameters.
    Keys are the parameter names and values are the parameter values.
#. ``resources``: A dictionary of the input resources.
    Keys are the resource names and values are ``Resource`` objects.
